public class DichotomySearch {
   public static void main(String[] args) {
       int[] arr = new int[] { 12, 23, 34, 45, 56, 67, 77, 89, 90 };
       System.out.println(search(arr, 12));
       System.out.println(search(arr, 45));
       System.out.println(search(arr, 67));
       System.out.println(search(arr, 89));
       System.out.println(search(arr, 99));
   }
   public static int search(int[] arr, int key) {
       int start = 0;
       int end = arr.length - 1;
       while (start <= end) {
           int middle = (start + end) / 2;
           if (key < arr[middle]) {
               end = middle - 1;
           } else if (key > arr[middle]) {
               start = middle + 1;
           } else {
               return middle;
           }
       }
       return -1;        //经检验，此处的return不能省略
   }
}


实现二分查找的第二种方法：
public void find(int leftIndex,int rightIndex,int val,int arr[]){
// 首先找到中间的数
int midIndex=((rightIndex+leftIndex)/2);
int midVal=arr[midIndex];
if(rightIndex>=leftIndex){
// 如果要找的数比midVal 大
if(midVal>val){
// 在arr 数组左边数列中找
find(leftIndex,midIndex-1,val,arr);
}else if(midVal<val){
// 在arr 数组右边数列中找
find(midIndex+1,rightIndex,val,arr);
}else if(midVal==val){
System.out.println(" 数组arr["+midIndex+"] 中的数字是"+arr[midIndex]);
}
}else{
System.out.println(" 没有找到你要找的数!");
}
}
}
